闭包：
    -指有权访问另一个函数作用域变量的函数
    -作用：延申了变量的范围v

递归：
    -如果一个函数在内部可以调用其本身，就是递归函数
    -为了防止出现'栈溢出'错误，必须要加退出条件return

浅拷贝和深拷贝：
    -浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用
        -ES6 中方法Object.assign(拷贝，被拷贝)
            -var once = {
                name:'jw',
                age:18,
                forever:{
                    pastLove:'z'
                }
            }
            var now = {};
            Object.assign(now,once);
            console.log(now)//{name:'jw',age:18,forever: {…}}
        -旧方法：
            -var once = {
                name:'jw',
                age:18,
                forever:{
                    pastLove:'z'
                }
            }
            var now = {};
            for(var k in once){
                now[k] = once[k]
            }
            console.log(now)//{name:'jw',age:18,forever: {…}}
    -深拷贝拷贝多层，每一级别的数据都会拷贝
        -var once = {
            name:'jw',
            age:18,
            forever:{
                pastLove:'z'
            }
        }
        var now = {};
        function deepCopy(newobj,oldobj){
            for(var k in oldobj){
                //判断属性值属于哪种数据类型
                var item = oldobj[k];
                //判断是否为数组和对象，都不是则为普通数据
                if(item instanceof Array){
                    newobj[k] = [];
                    deepCopy(newobj[k],item)
                }else if(item instanceof Object){
                    newobj[k] = {};
                    deepCopy(newobj[k],item)
                }else{
                    newobj[k] = item;
                }
            }
        }
        deepCopy(now,once);
        console.log(now);//{age: 18 forever:{pastLove: 'z'} name:"jw"}