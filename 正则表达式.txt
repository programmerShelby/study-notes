正则表达式：
    -是用于匹配字符串中字符组合的模式，在JS中正则表达式也是对象
    -特点：
        1.灵活性、逻辑性和功能性非常强
        2.可以迅速的用极简单的方式达到字符串的复杂控制
        3.复杂晦涩难懂
    -创建正则表达式对象
        1.通过调用RegExp对象构造函数创建
            -var regexp = new RegExp(/ /);
        2.通过字面量创建
            -var rg = /表达式/[switch];
                -[switch]可选值：
                    -g：全局匹配
                    -i: 忽略大小写
                    -gi：全局匹配 + 忽略大小写
    -检测是否符合正则表达式要求规范 test()
        -语法：regexObj.test(str)
            -参数：
                -regexObj  正则表达式
                -str  要测试的文本
    -边界符：
        1. ^ 表示匹配行首的文本（从谁开始）
        2. $ 表示匹配行尾的文本（从谁结束）
    -字符类：
        -[]表示有一系列字符可供选择，只要匹配其中一个就可以了
        -如果中括号中有[ ^ ]符号，表示取反的意思
        -正则里面的或者符号为 |
    -量词符：
        -用来设定某个模式出现的次数
            - * 相当于 >=0
            - + 相当于 >=1
            - ? 相当于 1||0
            - {n} 相当于 重复n次
            - {n, } 相当于 >=n
            - {n,m} 相当于 >=n && <=m
    -括号总结：
        -[ ]  字符集合，匹配方括号中的任意字符
        -{ }  量词符，里面表示重复次数
        -( )  表示优先级
    -预定义类：
        -指的是某些常见模式的简写方法
            - \d  相当于 [0-9]
            - \D  相当于 [^0-9]
            - \w  相当于 [A-Za-z0-9_]
            - \W  相当于 [^A-Za-z0-9_]
            - \s  匹配空格 相当于[\t\r\n\v\f]
            - \S  匹配非空格字符 相当于[^\t\r\n\v\f]
    -replace():
        -可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式
            -var once = 'jw past';
            var now = once.replace(/jw/,'none');
            console.log(now);//'none past'