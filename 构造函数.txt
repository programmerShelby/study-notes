创建对象的三种方法：
    1.利用 new Object() 创建对象
        -var obj1 = new Object();
    2.利用 对象字面量 创建对象
        -var obj2 = {};
    3.利用构造函数创建对象
        -function Star(uname,age){
                this.name = uname;
                this.age = age;
                this.sing = function(){
                    console.log('song')
                }
            }
            var ldh = new Star('刘德华',18);
            console.log(ldh.name);//刘德华
    
在JS中，使用构造函数时注意：
    1.构造函数用于创建某一类对象，其 首字母大写
    2.构造函数要和 new 一起使用才有意义
        -new 在执行时会做四件事：
            1）在内存中创建一个新的空对象
            2）让 this 指向这个新的对象
            3）执行构造函数里面的代码，给这个新对象添加属性和方法
            4）返回这个新对象（所以构造函数中不需要return）

构造函数特点：
    1.构造函数有原型对象prototype
    2.构造函数原型对象prototype 里面有 constructor 指向构造函数本身
    3.构造函数可以通过原型对象添加方法
    4.构造函数创建的实例对象有__proto__ 原型指向构造函数的原型对象

JS 构造函数中可以添加一些成员：
    （构造函数中的属性和方法我们称之为成员）
    1.静态成员：在构造函数本身上添加的成员称为 静态成员，
        只能由构造函数本身来访问
    2.实例成员：在构造函数内部创建的对象成员称为 实例成员，
        只能由实例化的对象来访问（内部通过this 添加的成员）

构造函数原型 prototype：
    -构造函数通过原型分配的函数是所有对象所共享的
    -Star.prototype.sing = function(){
                console.log('song')
    }
    ldh.sing();//song
    -一般情况下，我们的公共属性定义到构造函数里面，公共的方法放到原型对象身上

对象原型 _ _proto_ _:
    -对象都会有一个属性__proto__指向构造函数的prototype原型对象，
        我们对象才可以使用构造函数上的prototype原型对象的属性和方法

constructor:
    -指回原来的构造函数
    -Star.prototype = {
            //手动添加constructor属性指回原来的构造函数
            constructor:Star,
            sing: function () {
                console.log('song');
            },
            movie:function(){
                console.log('active');
            }
     }

原型链：
    -只要是对象就有__proto__原型，指向原型对象
    -我们Star原型对象里面的__proto__原型指向Objcet.prototype
    -我们Object.prototype 原型对象里面的__proto__原型 指向为 null
    
原型对象函数里面的this 指向的是 实例对象

扩展内置对象：
    -可以通过原型对象，对原本来的内置对象进行扩展自定义的方法 
    -栗子：在Array添加一个sum求和方法
        -Array.prototype.sum = function(){
            var sum = 0;
            for(var i = 0;i <this.length;i++){
                sum += this[i];
            }
            return sum;
        }
        arr= [1,2,3];
        console.log(arr.sum());//6


